{\rtf1\ansi\deff0
{\fonttbl{\f2\fnil\fcharset0 Courier New;}
{\f1\fnil\fcharset0 Arial;}
{\f0\fnil\fcharset0 Times New Roman;}
}
{\colortbl;}{\stylesheet{\s0 "Normal;}{\s1 Heading 1;}{\s2 Heading 2;}{\s3 Heading 3;}{\s4 Heading 4;}{\s5 Heading 5;}{\s6 Heading 6;}{\s7 Heading 7;}{\s8 Heading 8;}{\s9 Heading 9;}}
\deflang1024\notabind\facingp\hyphauto1\widowctrl
\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Patches for libxslt/libxml}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Patches for libxslt/libxml}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb373\li960\sl647\qc \b\fs49\f1 Patches for libxslt/libxml\keepn\hyphpar0\par\pard\sb216\li960\sl449\qc \fs34 Carlo Contavalli\keepn\hyphpar0\par\pard\sb400\li1310\ri350\sl260 \b0\fs20\lang1033\f0 This document describes a couple patches to apply to libxml and libxslt that could be useful to improve mod-xslt2 overall performance and reliability, even if their absence does not compromise mod-xslt2 usability.\hyphpar0\par\pard\sb259\s2\sl449 \b\fs34\lang1024\f1 1. License and Copyright\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 This document is Copyright (C), Carlo Contavalli 2002-2008.\hyphpar0\par\pard\sb400\li960\sl260 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of this license can be found at http://www.commedia.it/ccontavalli/license/FDL/en/index.html.\hyphpar0\par\pard\sb259\s2\sl449 \b\fs34\lang1024\f1 2. libxml - libxml.setglobalstate.diff\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 The setglobalstate patch allows an application to make use of the internal ``xmlGetGlobalState'' function provided by libxml2 and adds and adds a ``xmlSetGlobalState''.\hyphpar0\par\pard\sb400\li960\sl260 libxml makes use of many global variables kept in a task specific area (when multithreading is enabled) to avoid race conditions with other threads. However, this is not enough for mod-xslt: many apache modules share the same thread of execution and thus share the same ``task specific'' libxml data. To avoid interactions with other modules using libxml, mod-xslt saves the global execution state and restore it for each processed request. The process of ``storing'' and ``restoring'' is in facts a ``copy'' of a memory area (using memcpy). However, libxml internally uses a much more efficient mechanism that would allow mod-xslt to ``store'' and ``restore'' a single pointer on most POSIX systems (using POSIX threads).\hyphpar0\par\pard\sb400\li960\sl260 The highlited patch allows an application (like mod-xslt) to make use of those functions improving overall performance.\hyphpar0\par\pard\sb400\li960\sl260 The patch is automatically detected by mod-xslt ``configure'' and should not cause any harm to other applications.\hyphpar0\par\pard\sb259\s2\sl449 \b\fs34\lang1024\f1 3. libxslt - libxslt.genericerror.diff\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 Internally, libxslt calls ``xsltGenericError'' to signal an error to the application making use of the library.\hyphpar0\par\pard\sb400\li960\sl260 However, sometimes, ``xsltGenericError'' gets called by libxslt with the arguments of the function ``xsltGenericDebug'' instead of its own, causing a SEGFAULT in mod-xslt (which doesn't expect the wrong arguments to be passed - it would cause a SEGFAULT on most applications).\hyphpar0\par\pard\sb400\li960\sl260 Those ``xsltGenericError'' calls should never be reached in the normal path of execution of the library and of an application. However, it came out that they are sometimes reached, usually due to bugs in libxml2 or in the xslt handlers set by mod-xslt (quite unlikely :).\hyphpar0\par\pard\sb400\li960\sl260 A sort of harmless ``parachute'' has been employed in mod-xslt to detect this situation \i most\i0  of the times. However, this mechanism doesn't guarantee the error will be avoided \i all\i0  the times.\hyphpar0\par\pard\sb400\li960\sl260 To completely avoid this problem, you should patch the library with the provided .diff (or use the configure parameter described below).\hyphpar0\par\pard\sb400\li960\sl260 The patch was created by running something like: \hyphpar0\par\pard\sb200\li960\sl234 \fs18\f2 find . -type f -name '*.c' |xargs perl -pi -e \\\sa0\par\fi0\sb0
's/xsltGenericError\\(xsltGenericDebugContext/xsltGenericError\\(xsltGenericErrorContext/'\hyphpar0\par\pard\sb200\li960\sl260 \fs20\f0 from the libxslt source tree.\hyphpar0\par\pard\sb216\s3\li960\sl374 \b\fs28\lang1024\f1 3.1. configure - --enable-libxslt-hack\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 Another solution to patching the library is to use ``--enable-libxslt-hack''. Enabling this option to configure, mod-xslt will be configured to setup a fake ``debug'' error function, which uses the same parameters as the standard error functions.\hyphpar0\par\pard\sb400\li960\sl260 That way, the problem is completely avoided without needing any further action.\hyphpar0\par\pard\sb400\li960\sl260 Note, however, that by enabling this option you enable libxslt debugging facilities, which may potentially slow down the parsing.\hyphpar0\par\pard\sb259\s2\sl449 \b\fs34\lang1024\f1 4. libxslt - libxslt.fallback.diff\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 During debugging, it came out that most of those errors that used the wrong ``arguments'' were triggered by placing a ``<fallback>'' tag in the wrong position.\hyphpar0\par\pard\sb400\li960\sl260 When such a tag is found, ``libxslt'' will print an error message due to the fact it reaches an unexpected position in the code.\hyphpar0\par\pard\sb400\li960\sl260 However, if you use extension tags provided by mod-xslt and the fallback handler, you will see quite a bounce of these errors. If the library was not patched with libxslt.genericerror.diff or mod-xslt not compiled with ``--enable-libxslt-hack'', then each of these error would cause a SEGFAULT (however, this is not my fault), otherwise, an annoying warning is outputted in the logs.\hyphpar0\par\pard\sb400\li960\sl260 To avoid this warning filling the logs, you can apply libxslt.fallback.diff, which, conforming with ``REC-xslt-19991116.html#fallback'' will make libxslt ignore the presence of such a tag.\hyphpar0\par\pard\sb216\s3\li960\sl374 \b\fs28\lang1024\f1 4.1. configure - --enable-fallback-wraparound\keepn\hyphpar0\par\pard\sb400\li960\sl260 \b0\fs20\lang1033\f0 Another solution to patching the library is to compile mod-xslt passing ``--enable-fallback-wraparound'' as an argument to configure.\hyphpar0\par\pard\sb400\li960\sl260 Enabling this option will cause some more code to be compiled in mod-xslt. This code will take care of ``stripping down'' the <fallback tags from ``legal'' positions made illegal by mod-xslt usage of the library.\hyphpar0\par\pard\sb400\li960\sl260 Eg, the patch solves the problem once and forever. This option solves the problem when it is triggered by mod-xslt, which means every time a <fallback tag is found inside a mod-xslt extension tag.\hyphpar0\par}
